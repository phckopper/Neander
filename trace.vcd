$version Generated by VerilatedVcd $end
$date Mon Nov 29 21:37:38 2021
 $end
$timescale  10s $end

 $scope module TOP $end
  $var wire  1 ; i_clk $end
  $var wire  1 < i_rst $end
  $scope module neander $end
   $var wire  8 # ACC [7:0] $end
   $var wire  1 3 N $end
   $var wire  8 @ OP_ADD [7:0] $end
   $var wire  8 B OP_AND [7:0] $end
   $var wire  8 G OP_HLT [7:0] $end
   $var wire  8 D OP_JMP [7:0] $end
   $var wire  8 E OP_JN [7:0] $end
   $var wire  8 F OP_JZ [7:0] $end
   $var wire  8 ? OP_LDA [7:0] $end
   $var wire  8 = OP_NOP [7:0] $end
   $var wire  8 C OP_NOT [7:0] $end
   $var wire  8 A OP_OR [7:0] $end
   $var wire  8 > OP_STA [7:0] $end
   $var wire  8 & RDM [7:0] $end
   $var wire  8 1 REM [7:0] $end
   $var wire  8 0 RI [7:0] $end
   $var wire  1 2 SEL $end
   $var wire  3 5 STATE [2:0] $end
   $var wire  3 H ULA_ADD [2:0] $end
   $var wire  3 J ULA_AND [2:0] $end
   $var wire  1 ( ULA_N $end
   $var wire  3 K ULA_NOT [2:0] $end
   $var wire  3 I ULA_OR [2:0] $end
   $var wire  8 % ULA_OUT [7:0] $end
   $var wire  3 $ ULA_SEL [2:0] $end
   $var wire  8 & ULA_Y [7:0] $end
   $var wire  1 ' ULA_Z $end
   $var wire  1 4 Z $end
   $var wire  1 ) cargaAC $end
   $var wire  1 * cargaNZ $end
   $var wire  1 8 cargaPC $end
   $var wire  8 7 cargaPC_val [7:0] $end
   $var wire  1 , cargaRDM $end
   $var wire  1 + cargaREM $end
   $var wire  1 - cargaRI $end
   $var wire  1 ; i_clk $end
   $var wire  1 < i_rst $end
   $var wire  1 9 incrementaPC $end
   $var wire  1 : isJump $end
   $var wire  1 . memRead $end
   $var wire  1 / memWrite $end
   $var wire  8 6 valorPC [7:0] $end
   $scope module PC $end
    $var wire  1 ; i_clk $end
    $var wire  1 9 i_inc $end
    $var wire  8 7 i_preload [7:0] $end
    $var wire  1 8 i_preload_s $end
    $var wire  1 < i_rst $end
    $var wire  8 6 internal_PC [7:0] $end
    $var wire  8 6 o_PC [7:0] $end
   $upscope $end
   $scope module ula $end
    $var wire  3 H ADD [2:0] $end
    $var wire  3 J AND [2:0] $end
    $var wire  3 K NOT [2:0] $end
    $var wire  3 I OR [2:0] $end
    $var wire  8 # i_A [7:0] $end
    $var wire  8 & i_B [7:0] $end
    $var wire  3 $ i_SEL [2:0] $end
    $var wire  1 ( o_NEG $end
    $var wire  8 % o_OUT [7:0] $end
    $var wire  1 ' o_ZERO $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b000 $
b00000000 %
b00000000 &
0'
0(
0)
0*
0+
0,
0-
0.
0/
b00000000 0
b00000000 1
02
03
04
b000 5
b00000000 6
b00000000 7
08
09
0:
0;
0<
b00000000 =
b00000001 >
b00000010 ?
b00000011 @
b00000100 A
b00000101 B
b00000110 C
b00001000 D
b00001001 E
b00001010 F
b00001111 G
b011 H
b100 I
b101 J
b110 K
#1
1'
1.
b001 5
19
#2
b00000010 %
b00000010 &
0'
1-
0.
b010 5
b00000001 6
09
#3
1+
0-
b00000010 0
b011 5
#4
0+
1.
b00000001 1
b100 5
19
#5
b10000000 %
b10000000 &
1(
1+
12
b101 5
b00000010 6
09
#6
0+
b10000000 1
b110 5
#7
b010 $
b00011000 %
b00011000 &
0(
1)
1*
b111 5
#8
b00011000 #
0)
0*
1+
0.
02
b000 5
#9
0+
1.
b00000010 1
b001 5
19
#10
b00000011 %
b00000011 &
1-
0.
b010 5
b00000011 6
09
#11
1+
0-
b00000011 0
b011 5
#12
0+
1.
b00000011 1
b100 5
19
#13
b10000001 %
b10000001 &
1(
1+
12
b101 5
b00000100 6
09
#14
0+
b10000001 1
b110 5
#15
b011 $
b00100001 %
b00001001 &
0(
1)
1*
b111 5
#16
b00100001 #
b00101010 %
0)
0*
1+
0.
02
b000 5
#17
0+
1.
b00000100 1
b001 5
19
#18
b00100010 %
b00000001 &
1-
0.
b010 5
b00000101 6
09
#19
1+
0-
b00000001 0
b011 5
#20
0+
1.
b00000101 1
b100 5
19
#21
b10100011 %
b10000010 &
1(
1+
12
b101 5
b00000110 6
09
#22
0+
1,
b10000010 1
b110 5
#23
b01000010 %
b00100001 &
0(
1/
b111 5
#24
1+
0.
0/
02
b000 5
#25
0+
1.
b00000110 1
b001 5
19
#26
1-
0.
b010 5
b00000111 6
09
#27
1+
0-
b00100001 0
b011 5
#28
0+
1.
b00000111 1
b100 5
19
#29
1+
12
b101 5
b00001000 6
09
#30
0+
b00100001 1
b110 5
#31
b001 $
b00100001 %
1)
1*
b111 5
#32
0)
0*
1+
0.
02
b000 5
#33
0+
1.
b00001000 1
b001 5
19
#34
1-
0.
b010 5
b00001001 6
09
#35
1+
0-
b011 5
#36
0+
1.
b00001001 1
b100 5
19
#37
1+
12
b101 5
b00001010 6
09
#38
0+
b00100001 1
b110 5
#39
1)
1*
b111 5
#40
0)
0*
1+
0.
02
b000 5
#41
0+
1.
b00001010 1
b001 5
19
#42
1-
0.
b010 5
b00001011 6
09
#43
1+
0-
b011 5
#44
0+
1.
b00001011 1
b100 5
19
#45
1+
12
b101 5
b00001100 6
09
#46
0+
b00100001 1
b110 5
#47
1)
1*
b111 5
#48
0)
0*
1+
0.
02
b000 5
#49
0+
1.
b00001100 1
b001 5
19
